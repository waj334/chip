#ifndef _PERIPHERALS_VREFBUF_TD
#define _PERIPHERALS_VREFBUF_TD

include "base.td"

def VREFBUFPeripheral : PeripheralType<"VREFBUF", "VREFBUF"> {
  let accessWidth = 32;
  let registers = [
    Register<"CSR", 0x0, 32, [
      Field<"ENVR", 0, 1, ReadWrite, "Voltage reference buffer mode enable This bit is used to enable the voltage reference buffer mode.">,
      Field<"HIZ", 1, 1, ReadWrite, "High impedance mode This bit controls the analog switch to connect or not the VREF+ pin. Refer to Table196: VREF buffer modes for the mode descriptions depending on ENVR bit configuration.">,
      Field<"VRR", 3, 1, Read, "Voltage reference buffer ready">,
      Field<"VRS", 4, 3, ReadWrite, "Voltage reference scale These bits select the value generated by the voltage reference buffer. Other: Reserved">,
    ], "VREFBUF control and status register">,
    Register<"CCR", 0x4, 32, [
      Field<"TRIM", 0, 6, ReadWrite, "Trimming code These bits are automatically initialized after reset with the trimming value stored in the Flash memory during the production test. Writing into these bits allows to tune the internal reference buffer voltage.">,
    ], "VREFBUF calibration control register">,
  ];
}

class VREFBUFInstance<string Name, int Base> : PeripheralInstance<Name, Base, VREFBUFPeripheral>;
def VREFBUF : VREFBUFInstance<"VREFBUF", 0x58003c00>;

#endif // _PERIPHERALS_VREFBUF_TD
